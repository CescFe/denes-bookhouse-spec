openapi: 3.0.3
info:
  title: Denes Book House API
  version: 0.0.1
  description: |-
    This is the Denes Book House Server build with the OpenAPI 3.1 specification.
    This is an API RESTful that expose CRUD endpoints to handle a Book House.
servers:
  - url: https://localhost:8080
tags:
  - name: books
    description: a CRUD about books
  - name: collections
    description: a collection to group books
paths:
  /books:
    post:
      tags:
        - books
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: createBook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - books
      summary: Retrieve all books in the store
      description: Retrieve all books in the store
      operationId: getAllBooks
      responses:
        '200':
          description: List of all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /books/{bookId}:
    get:
      tags:
        - books
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
    put:
      tags:
        - books
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBook
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '422':
          description: Validation exception
    delete:
      tags:
        - books
      summary: Deletes a book
      description: delete a book
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid book value
  /collections:
    post:
      tags:
        - collections
      summary: Create a collection in the store
      description: Creates a new collection in the store and returns its details
      operationId: createCollection
      requestBody:
        description: Details of the collection to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionDTO'
        required: true
      responses:
        '201':
          description: Collection created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDTO'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /collections/{collectionId}:
    get:
      tags:
        - collections
      summary: Find collection by ID
      description: Returns a list of books added to a collection
      operationId: getCollectionById
      parameters:
        - name: collectionId
          in: path
          description: ID of collection to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: Collection not found
    put:
      tags:
        - collections
      summary: Update an existing collection
      description: Update an existing collection by Id
      operationId: updateCollection
      parameters:
        - name: collectionId
          in: path
          description: ID of collection to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent collection in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionDTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: Collection not found
        '422':
          description: Validation exception
    delete:
      tags:
        - collections
      summary: Deletes a collection
      description: delete a collection
      operationId: deleteCollection
      parameters:
        - name: collectionId
          in: path
          description: Collection id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid collection value
components:
  schemas:
    CollectionDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        books:
          type: array
          items:
            $ref: '#/components/schemas/BookDTO'
    BookDTO:
      required:
        - amount
        - description
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        description:
          type: string
          example: pencil
          maxLength: 255
        amount:
          type: integer
          format: int64
          example: 500
          minimum: 0
  requestBodies:
    Book:
      description: Book object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookDTO'
